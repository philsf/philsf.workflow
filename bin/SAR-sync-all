#!/bin/bash

# SAR_GC=""
# OPTIND=1

while getopts "hgr:" opt; do
    case $opt in
	h) #display help syntax
	    echo "help syntax"
	    exit 0
	    ;;
	g) GC_flag="-g"
	   ;;
	r) # replace REMOTES array
	    REMOTE_flag="${OPTARG}"
	   ;;
	\?) # Invalid option
            echo "Error: Invalid option"
            exit 0
	    ;;
    esac
done

shift "$((OPTIND-1))"

DIRECTORIES=("$@")

# strings to ignore
X11_IGNORE="X11 forwarding request failed on channel"
PULL_IGNORE="up-to-date|up to date|FETCH_HEAD|^From|$X11_IGNORE|fatal: couldn't find remote ref|You asked to pull|Because this is not|you must specify"
PUSH_IGNORE="up-to-date|up to date"

# default to local dir, if none in arguments
if [ ${#DIRECTORIES[@]} -eq 0 ]; then
    DIRECTORIES=(".")
fi

PRUNE="--prune"

for REPO in "${DIRECTORIES[@]}";
do echo -n "Entering $REPO ";
   # enter directory
   cd "$REPO";
   # SAR-sync ${GC_flag} ${REMOTE_flag}

   # test if we are inside a git repo
   if git rev-parse ; then
       # get the current branch name
       BRANCH=`git branch | grep '^*' | sed 's/^\* //'`

       if [ -n "$REMOTE_flag" ]; then
	   # -r overrides list of remotes
	   REMOTES=$REMOTE_flag
       else
	   # get list of remotes in local dir
	   REMOTES=`git remote`
       fi

       # sync remote
       for REMOTE in $REMOTES
       do
	   echo -n "$REMOTE "
	   # test if remote is available
	   if git fetch $REMOTE 2>/dev/null 1>/dev/null ; then
	       # get (pull)
	       git pull $PRUNE $REMOTE $BRANCH 2>&1 | egrep -v "$PULL_IGNORE|$X11_IGNORE"
	       # send (push)
	       git push $REMOTE : 2>&1 | egrep -v "$PUSH_IGNORE|$X11_IGNORE"
	       git push --tags $REMOTE 2>&1 | egrep -v "$PUSH_IGNORE|$X11_IGNORE"
	   else
	       echo -n "(not available) "
	   fi
       done
   fi

   echo "";
   cd - >/dev/null;
done
